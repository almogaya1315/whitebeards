------------------------------------------------

LIFT
L - Locate code quickly
I - Identify code at a glance
F - Flattest structure possible
T - Try to be DRY - Dont Repeat Yourself

------------------------------------------------
------------------------------------------------

Immutability is..
Not mutating existing objects in memory, but rather creating new objects.
------------------------------------------------
in:     UserRepositoryService.enroll(classId: string)
lines:  this.currentUser.classes.push(classId);
means:  the 'classes' array is mutating by adding an object to an existing array
        and the 'currentUser' object is mutating by changing the contents of the classes of the currentUser
fix:    this.currentUser = {} 
            --> set the currentUser to a new object
        this.currentUser = { ... } 
            --> spread operator, that coppies all props from the old object to a new object
        this.currentUser = { ...this.currentUser } 
            --> coppies all props from the old currentUser to a new object, on the same local prop (this.currentUser)
        this.currentUser = { ...this.currentUser, classes: } 
            --> overrides the classes prop by providing a new classes prop in this new object
        this.currentUser = { ...this.currentUser, classes: this.currentUser.classes.concat(classId) } 
            --> instead of pushing a new id to the existing array, we set it to a new array
means:  the concat method actually returns a new array with a new value added, instead of mutating an existing array.
------------------------------------------------
in:     UserRepositoryService.drop(classId: string)
lines:  this.currentUser.classes = this.currentUser.classes.filter((c: string) => c !== classId);
means:  the classes array is not mutating, but the currentUser is by changing its classes prop
fix:    this.currentUser = { ...this.currentUser, 
            --> coppies all props from the old currentUser to a new object, on the same local prop (this.currentUser)
        classes: this.currentUser.classes.filter((c: string) => c !== classId)};
            --> setting the currentUser to a new object with its same props and settings classes to a new filter array
------------------------------------------------
in:     UserRepositoryService.saveUser(user: IUser)
lines:  user.classes = user.classes || [];
        this.currentUser = user;
means:  this is not mutating the existing currentUser variable, but replacing the value.
        creates a potential mutation outside of this function, because its pointing the existing currentUser
        to the same user object and memory that is passed in.
        if the code that calls this saveUser() were to change its local user object after calling saveUser(),
        it could actually change the currentUser of this.
fix:    let classes = user.classes || [];
            --> create a new variable named classes
        this.currentUser = { ...user, classes: [...classes]};
            --> set the currentUser to a new object, with all of the props from the past user object
            --> and set a new classes prop to a new array with all the members in classes variable
means:  will update currentUser to a new object that is populated with all of the props from the past user

------------------------------------------------
------------------------------------------------

StrictMode is..
typescript validation and angular validation checks that are performed when the angular app is compiled
------------------------------------------------
in:     tsconfig.json
lines:  "angularCompilerOptions": {
            "enableI18nLegacyMessageIdFormat": false,
            "strictInjectionParameters": true,
            "strictInputAccessModifiers": true,
            "strictTemplates": true
        }
means:  Angular-spesific strict mode flags
lines:  "strict": false,
means:  default as true from angular 12, and best practice to be true
        using strict mode allows catching bugs during compilation while developing, rather then letting them slip to prod
------------------------------------------------
in:     AccountMenuComponent.ctor
lines:  @Input() user;
means:  with strict mode on, typescript requires to explicilty indicate when using 'any' data type
fix1:   @Input() user = any;
means:  explicilty indicating the 'any' data type, so there is no error.
fix2:   @Input() user!: IUser | null;
means:  because there is only a need for a user object to be passed to this parameter, it needs to be set with an actuall user data type, 
        or NULL, because when the user is not logged-in, the user will be null.
        this is an @input prop that will get set from another component, so exclamation point (!) allows it not to be set explicitly
fix3:   @Input() user: IUser | null = null; 
means:  NULL is the value when the user is not logged-in, so thats a valid state

------------------------------------------------
------------------------------------------------

Basic Modules:
-app.module
-routing.module
-core.module - community debates on necessity
-shared.module
-feature.module

in:     SharedModule.@NgModule()
lines:  [LoadingSpinnerComponent, CommonModule],
means:  when other modules import the shared module, the LoadingSpinnerComponent & CommonModule will be available

Feature modules allows to take grouped content, and turn into an actuall angular module,
that can be loaded lazily or eagerly, that help with performance.
It also allows to be encapsulated properly by controling export or keep private within the module.

------------------------------------------------
------------------------------------------------

@Input & @Output 

in:     LoadingSpinnerComponent.@Component()
lines:  inputs: ['loading']
means:  the input 'loading' is declared in the component metadata
OR
in:     LoadingSpinnerComponent.ctor
lines:  @Input() loading: boolean = false;
means:  the input 'loading' is declared in the component constructor

------------------------------------------------
------------------------------------------------

*OPTIONAL*
DONE: in catalog.component.html
      Create component for enroll.component.ts

        <td class="enroll center">
          <span class="sign-in" *ngIf="!userRepo.currentUser" disabled>Sign In to Enroll</span>
          <button *ngIf="userRepo.currentUser && !class.enrolled && !class.processing"
            (click)="enroll(class)">Enroll</button>
          <button *ngIf="userRepo.currentUser && class.enrolled && !class.processing"
            (click)="drop(class)">Drop</button>
          <wb-loading-spinner [loading]="class.processing"></wb-loading-spinner>
        </td>

------------------------------------------------
------------------------------------------------

@Inject -> service decorator that makes a service class injected to other components
@Injectable -> means that the service can be injected-to, in the ctor
Best practice is using @Injectable because you never know when you will need to inject.
------------------------------------------------
in:     catalog-repository.service.ts
lines:  constructor(@Inject(UserRepositoryService) private userRepo: UserRepositoryService) { }
means:  instead of marking the entire service as Injectable, params can be marked using the Inject.
        this approch is not recommended unless the service injected is not using the service's data type as the token for the service
------------------------------------------------
in:     UserRepositoryService.@Injectable()
lines:  providedIn: 'root' 
means:  the metadata object in the @Injectable decorator, has a 'providedIn' that is set to 'root'
        which explicitly tells angular to provide this service in the root injector, 
        which makes the service available to entire application as a singleton.
        that makes this code: 'providers: [UserRepositoryService]', in various modules metadata (@NgModule), obselete.
------------------------------------------------
in:     UserRepositoryService.@Injectable()
lines:  providedIn: 'platform' 
means:  used when having multiple angular apps running on a single page
------------------------------------------------
* Deprecated uses from Angular 14 --> 
  providedIn: 'any'
  providedIn: CustomModule
------------------------------------------------
* Not using the providedIn metadata, is very uncommon, 
  but is used in lazy loaded modules, when services are loaded lazily,
  because a new injector is used to create dif instances of the service, 
  for each component, instead of the root injector.

------------------------------------------------
------------------------------------------------

Lazy loading feature modules

in:     app-routing.module.ts
lines:  { path: 'users', loadChildren: () => import('./users/users.module').then(m => m.UsersModule) },
means:  loadChildren -> defines angular to load child routes from another module
        import       -> dynamically imports feature module when the navigates to the section (the feature module must export itself in the ts)
        then         -> after the asynchronous loading of the feature module, it returns the loaded module
------------------------------------------------
in:     users-routing.module.ts
lines:  { path: 'register', component: RegisterComponent },
means:  each lazily loaded module should have its own routing module
        register -> this would be appended to the app-routing's root with a backSlash (/)
------------------------------------------------
in:     UsersRoutingModule.@NgModule()
lines:  imports: [RouterModule.forChild(routes)],
means:  the app-routing calls 'forRoot' beacuse it handles routes at the root of the website
        the feaute-module-routing calls 'forChild' because it handles child routes just for the feature-module
        must add the feaute-module-routing to the feature-module imports
        must remove eagerly loading in app.module of the feature-module

------------------------------------------------
------------------------------------------------

Deploying Production Builds
is a performance best practice, that makes sure to build the app for prod and deploy it to a web server.

CLI -> npm run build (--prod: old syntax) 
    -> Builds the app for Production
    -> and Packaged the app in the dist folder
CLI -> npm install -g http-server 
    -> very simple little web server
CLI -> http-server dist/whitebeards
    -> run the server and pass the dist dir that was packed to prod
------------------------------------------------
CLI -> ls 
    -> shows all directories
CLI -> cd.. 
    -> goes up one dir

------------------------------------------------
------------------------------------------------

Monitoring Bundle Sizes
is knowing how large is the app from release to release.

When angular builds, it is Packaged into bundles/chunks, which are downloaded to the browser, when the site is navigated to.
The tools angular uses to display the chunks data, are in the output of 'npm run build'

in:     TERMINAL after running 'npm run build'
------------------------------------------------
lines:  Initial Chunk Files
means:  the chunks that were created and how big they are
------------------------------------------------
lines:  Initial Total
means:  how much will be downloaded on the initial load
------------------------------------------------
lines:  Lazy Chunk Files 
means:  the lazy chunks that were created and how big they are


in:     angulat.json
------------------------------------------------
lines:  "budgets": [
means:  allows to set size budgets for the app builds
------------------------------------------------
lines:  "type": "initial",
means:  default from the CLI, defining warnings and error levels based on the budgets
------------------------------------------------
lines:  "type": "anyComponentStyle", 
means:  will be triggered if the css for any single component is larger then the values defined
------------------------------------------------
lines:  "maximumWarning": "500kb",
means:  will generate a warning during the prod build if the initial bundle size exceeds the maximumWarning value
------------------------------------------------
lines:  "maximumError": "1mb"
means:  will generate an error and fail the build if the initial bundle size exceeds the maximumError value

------------------------------------------------

Using Lodash library that provides functions for working with arrays, etc.
CLI -> npm install lodash
CLI -> npm install @types/lodash --savedev


in:     UserRepositoryService.enroll()
------------------------------------------------
lines:  this.currentUser = { ...this.currentUser, classes: concat(this.currentUser.classes, classId) };
means:  Using lodash concat, instead of js built-in concat, to demonstrate what happens when exceeding initial bundle size budget
------------------------------------------------
case:   changing the maximumWarning to 320kb
in:     TERMINAL after running 'npm run build'
lines:  Warning: bundle initial exceeded maximum budget. Budget 320.00 kB was not met by 59.97 kB with a total of 379.97 kB.
------------------------------------------------
case:   changing the maximumError to 300kb
in:     TERMINAL after running 'npm run build'
lines:  Error: bundle initial exceeded maximum budget. Budget 300.00 kB was not met by 7.25 kB with a total of 307.25 kB.

------------------------------------------------

in:     angulat.json -> "budgets": [
------------------------------------------------
lines:  "type": "bundle", "name": "",
means:  budget for a specifically named bundle
------------------------------------------------
lines:  "type": "allScript",
means:  to monitor the size of the JS files for the entire app
------------------------------------------------
lines:  "type": "allScript",
means:  to monitor the size of the JS files for the entire app
------------------------------------------------
lines:  "type": "all",
means:  to monitor the size of the entire app
------------------------------------------------
lines:  "type": "any",
means:  to monitor that no file, of any type exceeds the budget
------------------------------------------------
lines:  "type": "initial",
        "maximumWarning": "5%",
        "maximumError": "10%",
        "baseline": "305kb"
means:  a warning if the app grows by more then 5 percent,
        and an error if the app grows by more then 10 percent.
        must define baseline for this to work.

------------------------------------------------
------------------------------------------------

Using OnPush Change Detection (Or Not)
Angular registers and listens to all low-level events, such as click & mouseover,
    and asynchronous events like JS's timeout, or API calls etc.
When any event raises, it checks every one of the angular binding, to see if it changed,
    and it will revaluate the bindings even if only one item changes.
Angular can manage 10,000 bindings very quickly,
    but if there is an expensive calc to generate the value for some binding,
    it should be done only when its totally necessary, with OnPush Change Detection
OnPush should be uses ONLY if there is a component with performance issues, 
    and its caused by the change detection that is calculating an expensive expression to be reevaluated too frequently.

in:     CatalogComponent.@Component()
lines:  changeDetection: ChangeDetectionStrategy.OnPush
means:  Angular will only do comparisons to objects references, not to every one of the object's props
        And instead change detection firing for every browser event, OnPush fires when input refernces change,
        Or when an async observable fires an event, and in few other cases.
        Immutability becomes very important because of the refs behavior.

------------------------------------------------
------------------------------------------------

Pure pipe performance -->
Pipe are pure by default, meaning they don't work with data mutation.
They get revaluated only if the actual object reference changes, of the object that the pipe is being applied to.
The Best practice is using a pure pipe and using immutability to make the pipe work, in the component logic.

------------------------------------------------
Custom Pipe -->

in:     'order-by.pipe.ts'
------------------------------------------------
import { Pipe, PipeTransform } from "@angular/core";
@Pipe({
    name: 'orderBy'
})
export class OrderByPipe implements PipeTransform {
    transform(array: any[], field: string) : any[] {
        if (!Array.isArray(array)){
            return array;
        } else return array.sort((x, y) => x[field] > y[field] ? 1 : x[field] < y[field] ? -1 : 0);
    }
}
------------------------------------------------
in:     'catalog.module.ts'
------------------------------------------------
@NgModule({
        imports: [...],
        declarations: [OrderByPipe],
        exports: [],
        providers: [] 
})
------------------------------------------------
in:     catalog.component.html
lines:  <th (click)="orderByField='professor'">Professor</th>
means:  register to the click event. And when clicked, prop 'orderByField' is set to 'professor'

in:     catalog.component.html
lines:  <tr *ngFor="let class of visibleClasses | orderBy: orderByField">
means:  sort the 'visibleClasses' using the 'orderByPipe', and will order by the 'orderByField' prop
        NOT the 'visibleClasses' array in changing, but a property on an object in that array.

in:     CatalogComponent
lines:  orderByField: string = '';
means:  declares public variable 'orderByField' in the component.ts

in:     OrderByPipe.@Pipe()
lines:  pure: false
means:  makes the pipe unpure, causing it to respond to data mutation.
        generates a great performance cost.











